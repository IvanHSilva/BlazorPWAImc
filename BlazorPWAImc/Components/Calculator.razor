<EditForm Model="@_model" OnValidSubmit="@OnSubmitAsync">
    <DataAnnotationsValidator/>

    <div class="mb flex flex-center">
        <InputNumber @bind-Value="_model.Height" class="form-input" 
        type="number" step="0.01" placeholder="Altura"/>
        <span class="form-input-invalid">
            <ValidationMessage For="@(() => _model.Height)"/>
        </span>
    </div>

    <div class="mb flex flex-center">
        <InputNumber @bind-Value="_model.Weight" class="form-input"
                     type="number" step="0.1" placeholder="Peso" />
        <span class="form-input-invalid">
            <ValidationMessage For="@(() => _model.Weight)" />
        </span>
    </div>

    <div class="flex flex-center">
        <button type="submit" class="btn btn-filled btn-auto mb">
            Calcular IMC
        </button>
        <a class="btn btn-link" href="#about">
            Sobre o Cálculo de IMc
        </a>
    </div>
</EditForm>

<Dialog @ref="_dialog" OnModalCloseCallback="@OnModalClose">
    @if (_model.Imc <= 18.6) {
        <h2>Abaixo do peso</h2>
        <p>Você está abaixo do peso indicado.</p>
    } else if (_model.Imc > 18.6 && _model.Imc <= 24.9) {
        <h2>Peso ideal</h2>
        <p>Você está na faixa de peso ideal.</p>
    } else if (_model.Imc > 24.9) {
        <h2>Sobrepeso</h2>
        <p>Você está acima do peso indicado.</p>
    }

    <h2>Modal</h2>
</Dialog>

@code {
    private Dialog _dialog = null!;
    private ImcModels _model = new();

    public async Task OnSubmitAsync() {
        await ShowModalAsync();
    }

    private Task ShowModalAsync() => _dialog.ShowModalAsync();

    private async Task OnModalClose() {
        _model = new();
    }
}
